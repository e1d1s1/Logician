Build Instructions for client-based tools:

Logician relies upon open source and freely available cross-platform tools, so you shouldn't have too much trouble compiling it regardless of your OS.  Visual Studio and QT Creator 4 project files are provided for your compiling convenience on your platform of choice, as well as GNU C++ Makefiles.

Prerequisites:
Rules Engine: EDSEngine
All platforms: 
- boost C++ libraries v1.47+
- iconv v1.9.2
- libxml2 v2.7.3+
- libxslt v1.1.24+
- Python 2.6+ (optional compile-time switch, disabled in default windows build configuration)
- Mozilla Spidermonkey Javascript engine 1.85 (optional compile-time switch).  Windows can use the integrated Windows Scripting host instead.
Windows:
- MSXML v6.0 (preferred build in lieu of libxml, libxslt, and iconv)

Rule Table Builder GUI: DecisionLogic
All platforms:
- wxWidgets GUI toolkit v2.8.10+, v2.9.3+ for VS2010 project
- iconv v1.9.2
- libxml2 v2.7.3+

C++ Dynamic application modeler: Relational Object Model
All platforms:
- iconv v1.9.2
- libxml2 v2.7.3+ 
- libxslt v1.1.24 
- EDSEngine v1.0
Windows:
- MSXML v6.0 (preferred build in lieu of libxml, libxslt, and iconv)

Windows .NET tools:
.NET Rules Engine: EDSEngineNET (C++/CLI wrapper implementation)
- .NET 3.5+
- EDSEngine v1.0

.NET Relational Object Model Wrapper: ROMNET (C++/CLI wrapper implementation)
- .NET 3.5+
- EDSEngine v1.0
- Relation Object Model v1.0

Silverlight Rules Engine and Relational Object Model
- Just a wrapper for the Javascript libraries, interface similar to the .NET library.  Silverlight v4.0 recommended and tested. Visual Studio 2010 project files provided.

Adobe Flash/Actionscript Rules Engine and Relational Object Model
- Just a wrapper for the Javascript libraries, interface similar to the .NET library.  However, overloading restrictions cause some function names to differ and in those cases are named similar to the javascript method.  Flash 10.1 tested.  FlashDevelop project files provided.

Android/iPhone notes:
- An example project utilizing the Google Android SDK and the Open Source "PhoneGap" project is provided.  PhoneGap enables you to write cross-platform mobile applications utilizing HTML5 and Javascript tools.  As such, the example shows how the Javascript libraies can be utilized for mobile development.  See http://www.phonegap.com for details.  Additionally, the C++ library should be useable by iPhone developers with Objective-C++, however this has not currently been tested or confirmed.


C++ Build Notes
Important pre-processor defines for EDSEngine/Relational Object Model:
USE_MSXML: on widows platform, enables use of MSXML 6.0
USE_LIBXML: optional on windows, required on all other platforms to enable use of libxml2 and libxslt.
USE_PYTHON: enables python runtime scripting support in rules.  You will need the Python and Boost libraries.  On Windows this may mean you will have to distribute the boost-python DLL along with your compiled code.
USE_JAVASCRIPT: enables javascript runtime scripting support in rules
USE_WINDOWS_SCRIPTING: on windows when javascript support is enabled, uses the windows scripting host for processing instead of spidermonkey, thereby eliminating that dependency.
POSIX: compliant (Linux) environments should enable this define
DISABLE_DECISIONLOGIC_INTEGRATION: In the EDSEngine build, adding this define to a build will disable intergrated DeicisionLogic debugging over a TCP Socket connection.  It's a handy feature to keep around, but you can eliminate this boost library dependency if you wish.
Windows:
Visual Studio 2008/2010 project files are included.  Configurations for both MSXML and libxml2 based builds are included, MSXML is recommended at this time.  You will have to download the prerequisites and build them as well.  Prereq binaries are available as a zip file in the repository.  The projects also build fine with the Windows Platform SDK tools, v7 or 7.1.  Just use the included bat files in the trunk directory.  Make sure you have WXWIN and BOOST_ROOT path vairables set when building from the command line.

Linux: (Ubuntu 9.10+, 12.04 recommended)
All of the prerequisites are available on Ubuntu as packages easily downloaded and installed through the package distribution service.  Most other Debian based system should be the same, although only Ubuntu has been tested.  A makefile and QT Creator project files are provided.  The current builds link against libxml 2.7.8, libxslt 1.1.26, libboost 1.48, Python 2.7, and wxWidgets 2.8.12.

Apple OSX:
Coming soon...should work since all the same *nix tools are available.  Need to test.

Notes for web tools:
The javascript components have been testing against IE6 and up, Firefox 3.5 (Gecko), Google Chrome 8 and Safari 4 (Webkit).  A sample test page with Logician scripting tools is available in the source repository.
