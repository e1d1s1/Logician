EDSEngine
All of the language ports of the EDSEngine library have a similar interface.  The main class names are slightly alterted to prevent confusion when inheriting the unmanaged C++ libraries in the managed C++ CLI/C# libraries.  In some cases the language constraints of Javascript prevent function overrides in the same manner as C++/C#, however the functionality is mostly duplicated.  Please note the C++ interface will accept both STL string or wstring types.  Only the wstring types are listed explicitly in this document for brevity's sake.

Constructors
The constructor for EDSEngine simply requires a path string to the souce rules xml or zipped xml file.  Zipped xml files are not supported in javascript.

	C++:
		CKonweldegeBase(wstring knowledge_file);
		//optional 2-step C++
		CKonweldegeBase()
		bool CreateKnowledgeBase(wstring knowledge_file)
	C#:
		EDSEngineNET(string knowledge_file);
		//optional 2-step C#:
		EDSEngineNET()
		bool CreateKnowledgeBase(string knowledge_file)
	Javascript:
		KnowledgeBase(xmlPath)
	
Public Properties
IsOpen: returns whether or not the rules file has been opened and parsed successfully.
	C++:
		bool IsOpen()
	C#:
		bool IsOpen()
	Javascript:
		boolean IsOpen()
	
TableCount(): returns the total number of distinct tables loaded from the rules file.
	C++:
		size_t TableCount()
	C#:
		int TableCount()
	Javascript:
		var TableCount()

TableHasScript: returns true if the passed rule table name contains any output cells that contain Javascript or Python code, false otherwise.
	C++:
		bool TableHasScript(string tableName)
	C#:
		bool TableHasScript(string tableName)
	Javascript:
		boolean TableHasScript(tableName)
		
TableIsGetAll: returns true if the passed rule table name has been specified by the author as a "get-all" table type, false otherwise.
	C++:
		bool TableIsGetAll(wstring tableName)
	C#:
		bool TableIsGetAll(string tableName)
	Javascript:
		boolean TableIsGetAll(tableName)

Table Properties
GetInputAttrs: returns a collection of input column names for a given table.
	C++:
		vector<wstring> GetInputAttrs(wstring tableName)
	C#:
		string[] GetInputAttrs(string tableName)
	Javascript:
		array GetInputAttrs(tableName)
		
GetInputDependencies: Returns a collection of input columns names necessary to solve any output in the given table, including those in any externally related tables with attributes the current table's input names may be dependent upon.  This is the complete "state" that the solver must be aware of to correctly solve the current table.
	C++:
		vector<wstring> GetInputDependencies(wstring tableName)
	C#:
		string[] GetInputDependencies(string tableName)
	Javascript:
		array GetInputDependencies(tableName)

GetOutputAttrs: Returns a collection of output column names for a given table.
	C++:
		vector<wstring> GetOutputAttrs(wstring tableName)
	C#:
		string[] GetOutputAttrs(string tableName)
	Javascript:
		array GetOutputAttrs(tableName)

GetAllPossibleOutputs: For a given output column in a given table, returns all distinct possible solutions.
	C++:
		vector<wstring> GetOutputAttrs(wstring tableName, wstring outputName)
	C#:
		string[] GetOutputAttrs(string tableName, string outputName)
	Javascript:
		array GetOutputAttrs(tableName, outputName)


Table State
SetInputValue: Sets an attribute input name/value pair.
	C++:
		void SetInputValue(wstring name, wstring value)
	C#:
		void SetInputValue(string name, string value)
	Javascript:
		SetInputValue(name, value)

SetInputValues: Sets a collection of input name/value pairs, where the values must already be tokenized.  This methods sets the private member variable directly and probably will not be typically used.
	C++:
		void SetInputValues(hash_map<wstring, size_t> values)
	C#:
		void SetInputValues(Dictionary<string, int> values)
	Javascript:
		SetInputValues(values)
		
GetInputValuesCount: Returns the total number of input values currently set.
	C++:
		size_t GetInputValuesCount()
	C#:
		int GetInputValuesCount()
	Javascript:
		var GetInputValuesCount()
		
Table Evaluation
EvaluateTable: A number of overrides exist in C++/C# for your convienience.  The javascript library has a seperate function name for each "override" to maintain a similar type of useage.  

	Returns an associative collection (map) of table results with output name as the key and a collection of solutions as the value.
	C++:
		map<wstring, vector<wstring> > EvaluateTable(wstring tableName)
	C#:
		Dictionary<string, string[]> EvaluateTable(string tableName)
	Javascript:
		array EvaluateTable(tableName)
		
	Returns an associative collection (map) of table results with output name as the key and a collection of solutions as the value, and allows the coder to override the "get-one" or "get-all" behavior of the evaluation.  When the parameter is omitted the format specified by the table author is used.
	C++:
		map<wstring, vector<wstring> > EvaluateTable(wstring tableName, bool bGetAll)
	C#:
		Dictionary<string, string[]> EvaluateTable(string tableName, bool bGetAll)
	Javascript:
		array EvaluateTableGet(tableName, bGetAll)

	Return a collection of solutions for a given output column in a table.
	C++:
		vector<wstring> EvaluateTable(wstring tableName, wstring outputAttr)
	C#:
		string[] EvaluateTable(string tableName, string outputAttr)
	Javascript:
		array EvaluateTableForAttr(tableName, outputAttr)
		
	Return a collection of solutions for a given output column in a table, and allows the coder to override the "get-one" or "get-all" behavior of the evaluation.  When the parameter is omitted the format specified by the table author is used.
	C++:
		vector<wstring> EvaluateTable(wstring tableName, wstring outputAttr, bool bGetAll)
	C#:
		string[] EvaluateTable(string tableName, string outputAttr, bool bGetAll)
	Javascript:
		array EvaluateTableForAttrGet(tableName, outputAttr, bGetAll)

EvaluateTableWithParam:	Similar to EvaluateTable, but an additional string parameter is available for use to pass any extra data to the table solver, and if Javascript or Python code is encountered during evaluations, the parameter will be set as a global value named "param" that you can reference in the script code.  Use the GetEvalParameter function to obtain the value back after a table solve if the script code modifies the value.

	Returns an associative collection (map) of table results with output name as the key and a collection of solutions as the value.
	C++:
		map<wstring, vector<wstring> > EvaluateTableWithParam(wstring tableName, wstring param)
	C#:
		Dictionary<string, string[]> EvaluateTableWithParam(string tableName, string param)
	Javascript:
		array EvaluateTableWithParam(tableName, param)
		
	Return a collection of solutions for a given output column in a table, and allows the coder to override the "get-one" or "get-all" behavior of the evaluation.  When the parameter is omitted the format specified by the table author is used.
	C++:
		vector<wstring> EvaluateTableWithParam(wstring tableName, wstring outputAttr, wstring param)
	C#:
		string[] EvaluateTableWithParam(string tableName, string outputAttr, string param)
	Javascript:
		array EvaluateTableForAttrWithParam(tableName, outputAttr, param)
		
	Returns an associative collection (map) of table results with output name as the key and a collection of solutions as the value, and allows the coder to override the "get-one" or "get-all" behavior of the evaluation.  When the parameter is omitted the format specified by the table author is used.  Internally, this is the call all the other overrides are wrapped to.
	C++:
		map<wstring, vector<wstring> > EvaluateTableWithParam(wstring tableName, wstring param, bool bGetAll)
	C#:
		Dictionary<string, string[]> EvaluateTableWithParam(string tableName, string param, bool bGetAll)
	Javascript:
		array EvaluateTableWithParamGet(tableName, param, bGetAll)	
		
	Return a collection of solutions for a given output column in a table, and allows the coder to override the "get-one" or "get-all" behavior of the evaluation.  When the parameter is omitted the format specified by the table author is used.
	C++:
		vector<wstring> EvaluateTableWithParam(wstring tableName, wstring outputAttr, wstring param, bool bGetAll)
	C#:
		string[] EvaluateTableWithParam(string tableName, string outputAttr, string param, bool bGetAll)
	Javascript:
		array EvaluateTableForAttrWithParamGet(tableName, outputAttr, param, bGetAll)
		
ReverseEvaluateTable: Performs a table solve but switches all output columns to inputs and all input columns become outputs, effectively reversing the table.  No Javascript or Python scripting will take place.  No table chaining.

	Returns an associative collection (map) of table results with output (reversed input) name as the key and a collection of solutions as the value.
	C++:
		map<wstring, vector<wstring> > ReverseEvaluateTable(wstring tableName)
	C#:
		Dictionary<string, string[]> ReverseEvaluateTable(string tableName)
	Javascript:
		array ReverseEvaluateTable(tableName)

	Returns an associative collection (map) of table results with output (reversed input) name as the key and a collection of solutions as the value, and allows the coder to override the "get-one" or "get-all" behavior of the evaluation.  When the parameter is omitted the format specified by the table author is used.
	C++:
		map<wstring, vector<wstring> > ReverseEvaluateTable(wstring tableName, bool bGetAll)
	C#:
		Dictionary<string, string[]> ReverseEvaluateTable(string tableName, bool bGetAll)
	Javascript:
		array ReverseEvaluateTableGet(tableName, bGetAll)

	Return a collection of solutions for a given output (reversed input) column in a table.
	C++:
		vector<wstring> ReverseEvaluateTable(wstring tableName, wstring inputAttr)
	C#:
		string[] ReverseEvaluateTable(string tableName, string inputAttr)
	Javascript:
		array ReverseEvaluateTableForAttr(tableName, inputAttr)

	Return a collection of solutions for a given output column in a table, and allows the coder to override the "get-one" or "get-all" behavior of the evaluation.  When the parameter is omitted the format specified by the table author is used.
	Return a collection of solutions for a given output (reversed input) column in a table.
	C++:
		vector<wstring> ReverseEvaluateTable(wstring tableName, wstring inputAttr, bool bGetAll)
	C#:
		string[] ReverseEvaluateTable(string tableName, string inputAttr, bool bGetAll)
	Javascript:
		array ReverseEvaluateTableForAttrGet(tableName, inputAttr, bool bGetAll)
		
GetEvalParameter: Returns the value of the "param" parameter passed in a previous table evaluation.  Use this when you have Javascript or Python script that will modify the value during the table evaluation and you need the resulting vaule.
	C++:
		wstring GetEvalParameter(wstring tableName)
	C#:
		string GetEvalParameter(string tableName)
	Javascript:
		string GetEvalParameter(tableName)

ResetTable: Clears the attribute name/value state for a given table.  This is called internally as needed, and typically the coder should not need to call it.
	C++:
		void ResetTable(wstring tableName)
	C#:
		void ResetTable(string tableName)
	Javascript:
		ResetTable(tableName)
		
Translations
The translation functions make use of any string translations you may have defined in the rule table project.  These translations can be used to tranalate internal table cell values into other languages, or to provide a way to maintain a form of shorthand in the rules while displaying a longer description as the solution in the client application.  All internal rules are considered to be written in a "nuetral" language.

Localize: Converts some "nuetral" text to a particular translation.  The "locale" is defined as the column header in the translation spreadsheet within the table project.  It doesn't necessarily have to be an ISO locale like "en-US", although that would be a logical useage.  Internally, this function calls the Translate function.
	C++:
		wstring Localize(wstring baseValue, wstring locale)
	C#:
		string Localize(string baseValue, string locale)
	Javascript:
		string Localize(baseValue, locale)
		
DeLocalize: Converts some translated text back into the "nuetral" value.
	C++:
		wstring DeLocalize(wstring localeValue)
	C#:
		string DeLocalize(string localeValue)
	Javascript:
		string DeLocalize(localeValue)
		
Translaate: Converts translated text from one locale to another.  If the sourceLocale is not specified, it is assumed that the passed text is of the "nuetral" language.
	C++:
		wstring Translaate(wstring source, wstring sourceLocale, wstring destLocale)
	C#:
		string Translaate(string source, string sourceLocale, string destLocale)
	Javascript:
		string Translaate(source, sourceLocale, destLocale)
		
Debugging
WIth debugging enabled in the compiled rules xml file, there are a couple of ways to do rule debugging within the client code.  Table evaluation status messages can be routed through a function pointer for tracking.  Alternatively, messages can be stored in a cache within the rules engine and pulled as needed by the caller.  Keep in mind that if you created the rules via a DecisionLogic table editor, that application can "catch" messages via a TCP connection from the C++ and C# libraries and provide rule row/column highlighting in the source decision table project.  Of course, debugging will slow down rules execution.  You can limit the performance hit bit limiting the scope of tables to be debugged in the rules xml file.

SetDebugHandler: Function pointer to output table evaluation/value states as they occur and error messages.
	C++:
		void SetDebugHandler(void (*DebugHandler) (wstring))
	Javascript:
		void SetDebugHandler(func)
		
DebugDelegate: Similar to the SetDebugHandler methods, but using a C# delegate: 
	public delegate void DebugHandlerDelegate(String^ msg)

GenerateDebugMessages: In C++ enables or disables the storage of debugging messsages in an internal cache.  Access the cache value with the GetDebugMessages function.
	C++:
		void SetDebugHandler(void (*DebugHandler) (wstring))

GetDebugMessages: In C++ retrieves the debugging message cache.  The intermal cache is then cleared.
	C++:
		wstring GetDebugMessages()

SetDebugging: In C#, turns on the rule debugger so that the DebugDelegate can receive messages.  Internally, this calls the wrapped C++ method GenerateDebugMessages function to enable/disable the internal message cache, and later calls GetDebugMessages at appropriate times.