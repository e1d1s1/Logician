<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" >
<head runat="server">
    <title>EDSEngine Web Implementation (No Server Callbacks)</title>    
    <script src="ajaxslt/util.js" type="text/javascript"></script>  
    <script src="ajaxslt/xmltoken.js" type="text/javascript"></script>  
    <script src="ajaxslt/dom.js" type="text/javascript"></script>  
    <script src="ajaxslt/xpath.js" type="text/javascript"></script>  
    <script src="ajaxslt/xslt.js" type="text/javascript"></script>  
    <script src="./KnowledgeBase.js" type="text/javascript"></script>    
    <script src="./ROMNode.js" type="text/javascript"></script>
    <script type="text/javascript">
        //var rules = "\x3C?xml version=\"1.0\" encoding=\"UTF-8\"?\x3E\n\x3CTables debugtables=\"testtable2\" debug=\"true\" connection=\"localhost:3000\"\x3E\n  \x3CTable name=\"ClassDictionary\" getall=\"false\"\x3E\n    \x3CInputs\x3E\n      \x3CAttr\x3ECLASSID\x3C\x2FAttr\x3E\n      \x3CValue id=\"5\" operation=\"1\"\x3ETestApplication\x3C\x2FValue\x3E\n    \x3C\x2FInputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3EName\x3C\x2FAttr\x3E\n      \x3CValue id=\"6\" operation=\"4096\"\x3Eeval(Dictionary, Name)\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3EDescription\x3C\x2FAttr\x3E\n      \x3CValue id=\"7\" operation=\"4096\"\x3Eeval(Dictionary, Description)\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3EDefaultValue\x3C\x2FAttr\x3E\n      \x3CValue id=\"8\" operation=\"4096\"\x3Eeval(Dictionary, DefaultValue)\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3EAttributeType\x3C\x2FAttr\x3E\n      \x3CValue id=\"9\" operation=\"4096\"\x3Eeval(Dictionary, AttributeType)\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3ERuleTable\x3C\x2FAttr\x3E\n      \x3CValue id=\"10\" operation=\"4096\"\x3Eeval(Dictionary, RuleTable)\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n  \x3C\x2FTable\x3E\n  \x3CTable name=\"DictAttr1\" getall=\"false\"\x3E\n    \x3CInputs\x3E\n      \x3CAttr\x2F\x3E\n      \x3CValue\x2F\x3E\n    \x3C\x2FInputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3EcDictAttr1\x3C\x2FAttr\x3E\n      \x3CValue id=\"11,12,13,14\" operation=\"1\"\x3EOption1|Option2|Option3|Option4\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n  \x3C\x2FTable\x3E\n  \x3CTable name=\"DictAttr2\" getall=\"false\"\x3E\n    \x3CInputs\x3E\n      \x3CAttr\x3EcDictAttr1\x3C\x2FAttr\x3E\n      \x3CValue id=\"11\" operation=\"1\"\x3EOption1\x3C\x2FValue\x3E\n      \x3CValue id=\"12\" operation=\"1\"\x3EOption2\x3C\x2FValue\x3E\n      \x3CValue id=\"13\" operation=\"1\"\x3EOption3\x3C\x2FValue\x3E\n    \x3C\x2FInputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3EdDictAttr2\x3C\x2FAttr\x3E\n      \x3CValue id=\"15,16,17\" operation=\"1\"\x3E@ResultByOption1|Result2|Result3\x3C\x2FValue\x3E\n      \x3CValue id=\"16\" operation=\"1\"\x3EResult2\x3C\x2FValue\x3E\n      \x3CValue id=\"17\" operation=\"1\"\x3EResult3\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n  \x3C\x2FTable\x3E\n  \x3CTable name=\"DictAttr3\" getall=\"false\"\x3E\n    \x3CInputs\x3E\n      \x3CAttr\x3EdDictAttr2\x3C\x2FAttr\x3E\n      \x3CValue id=\"18\" operation=\"1\"\x3EResultByOption1\x3C\x2FValue\x3E\n      \x3CValue id=\"16\" operation=\"1\"\x3EResult2\x3C\x2FValue\x3E\n      \x3CValue\x2F\x3E\n    \x3C\x2FInputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3EaDictAttr3\x3C\x2FAttr\x3E\n      \x3CValue id=\"19\" operation=\"1\"\x3EYY\x3C\x2FValue\x3E\n      \x3CValue id=\"20\" operation=\"1\"\x3EYN\x3C\x2FValue\x3E\n      \x3CValue id=\"21\" operation=\"1\"\x3EN\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n  \x3C\x2FTable\x3E\n  \x3CTable name=\"DictAttr4\" getall=\"false\"\x3E\n    \x3CInputs\x3E\n      \x3CAttr\x3EaDictAttr3\x3C\x2FAttr\x3E\n      \x3CValue id=\"22\" operation=\"1\"\x3EY\x3C\x2FValue\x3E\n      \x3CValue id=\"21\" operation=\"1\"\x3EN\x3C\x2FValue\x3E\n    \x3C\x2FInputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3EbDictAttr4\x3C\x2FAttr\x3E\n      \x3CValue id=\"23,24,25\" operation=\"1\"\x3ESelection1|@Selection2|@Selection3\x3C\x2FValue\x3E\n      \x3CValue id=\"23,26\" operation=\"1\"\x3ESelection1|Selection2\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n  \x3C\x2FTable\x3E\n  \x3CTable name=\"DictAttr5\" getall=\"false\"\x3E\n    \x3CInputs\x3E\n      \x3CAttr\x3EaDictAttr3\x3C\x2FAttr\x3E\n      \x3CValue id=\"22\" operation=\"1\"\x3EY\x3C\x2FValue\x3E\n      \x3CValue id=\"21\" operation=\"1\"\x3EN\x3C\x2FValue\x3E\n    \x3C\x2FInputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3EeDictAttr5\x3C\x2FAttr\x3E\n      \x3CValue id=\"27\" operation=\"1\"\x3E[0,35]\x3C\x2FValue\x3E\n      \x3CValue id=\"28\" operation=\"1\"\x3E[10,50]\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n  \x3C\x2FTable\x3E\n  \x3CTable name=\"Dictionary\" getall=\"true\"\x3E\n    \x3CInputs\x3E\n      \x3CAttr\x2F\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n    \x3C\x2FInputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3EName\x3C\x2FAttr\x3E\n      \x3CValue id=\"29\" operation=\"1\"\x3EaDictAttr3\x3C\x2FValue\x3E\n      \x3CValue id=\"30\" operation=\"1\"\x3EbDictAttr4\x3C\x2FValue\x3E\n      \x3CValue id=\"31\" operation=\"1\"\x3EcDictAttr1\x3C\x2FValue\x3E\n      \x3CValue id=\"32\" operation=\"1\"\x3EdDictAttr2\x3C\x2FValue\x3E\n      \x3CValue id=\"33\" operation=\"1\"\x3EeDictAttr5\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3EDescription\x3C\x2FAttr\x3E\n      \x3CValue id=\"34\" operation=\"1\"\x3EA Boolean Attribute\x3C\x2FValue\x3E\n      \x3CValue id=\"35\" operation=\"1\"\x3EA Multi-Select Attribute\x3C\x2FValue\x3E\n      \x3CValue id=\"36\" operation=\"1\"\x3EA Single Selection Attribute\x3C\x2FValue\x3E\n      \x3CValue id=\"37\" operation=\"1\"\x3EAnother Single Selection\x3C\x2FValue\x3E\n      \x3CValue id=\"38\" operation=\"1\"\x3EAn Edit Attribute\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3EDefaultValue\x3C\x2FAttr\x3E\n      \x3CValue id=\"39\" operation=\"1\"\x3E~\x3C\x2FValue\x3E\n      \x3CValue id=\"39\" operation=\"1\"\x3E~\x3C\x2FValue\x3E\n      \x3CValue id=\"39\" operation=\"1\"\x3E~\x3C\x2FValue\x3E\n      \x3CValue id=\"39\" operation=\"1\"\x3E~\x3C\x2FValue\x3E\n      \x3CValue id=\"40\" operation=\"1\"\x3E0\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3EAttributeType\x3C\x2FAttr\x3E\n      \x3CValue id=\"41\" operation=\"1\"\x3EBOOLEAN\x3C\x2FValue\x3E\n      \x3CValue id=\"42\" operation=\"1\"\x3EMULTISELECT\x3C\x2FValue\x3E\n      \x3CValue id=\"43\" operation=\"1\"\x3ESINGLESELECT\x3C\x2FValue\x3E\n      \x3CValue id=\"43\" operation=\"1\"\x3ESINGLESELECT\x3C\x2FValue\x3E\n      \x3CValue id=\"44\" operation=\"1\"\x3EEDIT\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3ERuleTable\x3C\x2FAttr\x3E\n      \x3CValue id=\"45\" operation=\"1\"\x3EDictAttr3\x3C\x2FValue\x3E\n      \x3CValue id=\"46\" operation=\"1\"\x3EDictAttr4\x3C\x2FValue\x3E\n      \x3CValue id=\"47\" operation=\"1\"\x3EDictAttr1\x3C\x2FValue\x3E\n      \x3CValue id=\"48\" operation=\"1\"\x3EDictAttr2\x3C\x2FValue\x3E\n      \x3CValue id=\"49\" operation=\"1\"\x3EDictAttr5\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n  \x3C\x2FTable\x3E\n  \x3CTable name=\"ReverseTest\" getall=\"false\"\x3E\n    \x3CInputs\x3E\n      \x3CAttr\x3EColor1\x3C\x2FAttr\x3E\n      \x3CValue id=\"50\" operation=\"1\"\x3Ered\x3C\x2FValue\x3E\n      \x3CValue id=\"51\" operation=\"1\"\x3Eblue\x3C\x2FValue\x3E\n      \x3CValue id=\"50\" operation=\"1\"\x3Ered\x3C\x2FValue\x3E\n    \x3C\x2FInputs\x3E\n    \x3CInputs\x3E\n      \x3CAttr\x3EColor2\x3C\x2FAttr\x3E\n      \x3CValue id=\"52\" operation=\"1\"\x3Eyellow\x3C\x2FValue\x3E\n      \x3CValue id=\"52\" operation=\"1\"\x3Eyellow\x3C\x2FValue\x3E\n      \x3CValue id=\"51\" operation=\"1\"\x3Eblue\x3C\x2FValue\x3E\n    \x3C\x2FInputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3EOutColor\x3C\x2FAttr\x3E\n      \x3CValue id=\"53\" operation=\"1\"\x3Eorange\x3C\x2FValue\x3E\n      \x3CValue id=\"54\" operation=\"1\"\x3Egreen\x3C\x2FValue\x3E\n      \x3CValue id=\"55\" operation=\"1\"\x3Epurple\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n  \x3C\x2FTable\x3E\n  \x3CTable name=\"testtable1\" getall=\"true\"\x3E\n    \x3CInputs\x3E\n      \x3CAttr\x3EinputAttr1\x3C\x2FAttr\x3E\n      \x3CValue id=\"56,57\" operation=\"1\"\x3EA|Z\x3C\x2FValue\x3E\n      \x3CValue id=\"58\" operation=\"1\"\x3EC\x3C\x2FValue\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue id=\"59\" operation=\"1\"\x3ETestParameterJS\x3C\x2FValue\x3E\n      \x3CValue id=\"60\" operation=\"1\"\x3ETestParameterPY\x3C\x2FValue\x3E\n    \x3C\x2FInputs\x3E\n    \x3CInputs\x3E\n      \x3CAttr\x3EinputAttr2\x3C\x2FAttr\x3E\n      \x3CValue id=\"61\" operation=\"1\"\x3E1\x3C\x2FValue\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue id=\"62\" operation=\"16\"\x3E9\x3C\x2FValue\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue id=\"63\" operation=\"64\"\x3E50,60\x3C\x2FValue\x3E\n      \x3CValue id=\"64\" operation=\"64\"\x3E70,80\x3C\x2FValue\x3E\n      \x3CValue id=\"59\" operation=\"1\"\x3ETestParameterJS\x3C\x2FValue\x3E\n      \x3CValue id=\"60\" operation=\"1\"\x3ETestParameterPY\x3C\x2FValue\x3E\n    \x3C\x2FInputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3EanotherOutput\x3C\x2FAttr\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n    \x3C\x2FOutputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3EoutputAttr1\x3C\x2FAttr\x3E\n      \x3CValue id=\"61,65\" operation=\"1\"\x3E1|2\x3C\x2FValue\x3E\n      \x3CValue id=\"65\" operation=\"1\"\x3E2\x3C\x2FValue\x3E\n      \x3CValue id=\"66\" operation=\"2049\"\x3Eget(outsideAttr1) with concat\x3C\x2FValue\x3E\n      \x3CValue id=\"67\" operation=\"1\"\x3E4\x3C\x2FValue\x3E\n      \x3CValue id=\"68\" operation=\"1\"\x3E5\x3C\x2FValue\x3E\n      \x3CValue id=\"69\" operation=\"3073\"\x3Epy(get(outsideAttr1) + 2)\x3C\x2FValue\x3E\n      \x3CValue id=\"70\" operation=\"10241\"\x3Ejs(get(outsideAttr1) + 2)\x3C\x2FValue\x3E\n      \x3CValue id=\"71\" operation=\"8193\"\x3Ejs(alterparameter())\x3C\x2FValue\x3E\n      \x3CValue id=\"72\" operation=\"1025\"\x3Epy(alterparameter())\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n    \x3CFormulaInput\x3EoutsideAttr1\x3C\x2FFormulaInput\x3E\n  \x3C\x2FTable\x3E\n  \x3CTable name=\"testtable2\" getall=\"true\"\x3E\n    \x3CInputs\x3E\n      \x3CAttr\x3Ein1\x3C\x2FAttr\x3E\n      \x3CValue id=\"73\" operation=\"1\"\x3Ethis is a comment\x3C\x2FValue\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n    \x3C\x2FInputs\x3E\n    \x3CInputs\x3E\n      \x3CAttr\x3Expath(\x2F\x2FObject[@id=\'ChildObject\']\x2FAttribute[@id=\'childAttr\']\x2F@value)\x3C\x2FAttr\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue id=\"74\" operation=\"1\"\x3Esome value of value\x3C\x2FValue\x3E\n    \x3C\x2FInputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3Eout1\x3C\x2FAttr\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue id=\"75\" operation=\"4096\"\x3Eeval(testtable1, outputAttr1)\x3C\x2FValue\x3E\n      \x3CValue id=\"76\" operation=\"1\"\x3EXPATH Worked and UNICODE check:\u4e9b\u4e9b\u4e9b 3 simplifed chinese U+4E9B\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n  \x3C\x2FTable\x3E\n  \x3CTable name=\"testtable3\" getall=\"true\"\x3E\n    \x3CInputs\x3E\n      \x3CAttr\x3EinputAttr2\x3C\x2FAttr\x3E\n      \x3CValue id=\"77\" operation=\"2064\"\x3Eget(someAttr)\x3C\x2FValue\x3E\n      \x3CValue id=\"77\" operation=\"2056\"\x3Eget(someAttr)\x3C\x2FValue\x3E\n    \x3C\x2FInputs\x3E\n    \x3CFormulaInput\x3EsomeAttr\x3C\x2FFormulaInput\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3EoutputAttr1\x3C\x2FAttr\x3E\n      \x3CValue id=\"78\" operation=\"2049\"\x3EinputAttr2: get(inputAttr2) is greater than someAttr: get(someAttr)\x3C\x2FValue\x3E\n      \x3CValue id=\"79\" operation=\"2049\"\x3EinputAttr2: get(inputAttr2) is less than or equal to someAttr: get(someAttr)\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n    \x3CFormulaInput\x3EinputAttr2\x3C\x2FFormulaInput\x3E\n    \x3CFormulaInput\x3EsomeAttr\x3C\x2FFormulaInput\x3E\n  \x3C\x2FTable\x3E\n  \x3CTable name=\"testtable4\" getall=\"true\"\x3E\n    \x3CInputs\x3E\n      \x3CAttr\x3EinputAttr2\x3C\x2FAttr\x3E\n      \x3CValue id=\"2\" operation=\"1\"\x3ENULL\x3C\x2FValue\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue id=\"2\" operation=\"1\"\x3ENULL\x3C\x2FValue\x3E\n      \x3CValue\x2F\x3E\n    \x3C\x2FInputs\x3E\n    \x3CInputs\x3E\n      \x3CAttr\x3EinputAttr1\x3C\x2FAttr\x3E\n      \x3CValue\x2F\x3E\n      \x3CValue id=\"2\" operation=\"1\"\x3ENULL\x3C\x2FValue\x3E\n      \x3CValue id=\"2\" operation=\"1\"\x3ENULL\x3C\x2FValue\x3E\n      \x3CValue\x2F\x3E\n    \x3C\x2FInputs\x3E\n    \x3COutputs\x3E\n      \x3CAttr\x3EoutputAttr1\x3C\x2FAttr\x3E\n      \x3CValue id=\"80\" operation=\"1\"\x3EinputAttr2 is NULL\x3C\x2FValue\x3E\n      \x3CValue id=\"81\" operation=\"1\"\x3EinputAttr1 is NULL\x3C\x2FValue\x3E\n      \x3CValue id=\"82\" operation=\"1\"\x3Eboth attrs are NULL\x3C\x2FValue\x3E\n      \x3CValue id=\"83\" operation=\"1\"\x3Efallout rule\x3C\x2FValue\x3E\n    \x3C\x2FOutputs\x3E\n  \x3C\x2FTable\x3E\n  \x3CTranslations\x3E\n    \x3CString id=\"56\" en-US=\"A trans\"\x2F\x3E\n    \x3CString id=\"57\" en-US=\"Z trans\"\x2F\x3E\n  \x3C\x2FTranslations\x3E\n  \x3CScripting\x3E\n    \x3CPython\x3Edef alterparameter():\&#13;\n    global param\&#13;\n    param = param + \" modified\"\&#13;\n    return \"eval ok\"\x3C\x2FPython\x3E\n    \x3CJavascript\x3Efunction alterparameter()\&#13;\n{    \&#13;\n    param = param + \" modified\";\&#13;\n    return \"eval ok\";\&#13;\n}\x3C\x2FJavascript\x3E\n  \x3C\x2FScripting\x3E\n\x3C\x2FTables\x3E\n"
        function btnTest_onclick()
        {
            clear_results();        
            var filename = "test_project.xml";
            var knowledge = new KnowledgeBase(filename);
            //var knowledge = CreateKnowledgeBaseFromString(rules);
            if (knowledge.IsOpen() == false)
            {
                write_result("FAILURE: Could not open rules xml file: " + filename);
                return false;
            }
            else
            {
                write_result("OK: File opened");
            }

            knowledge.SetDebugHandler(debugHandler);
                        
            var cnt = knowledge.TableCount();
            if (cnt == 14)
            {
                write_result("OK: 14 Tables loaded");
            }
            else
            {
                write_result("FAILURE: Not all tables loaded: " + cnt.toString());
                return false;
            }
            
            var tableName = "testtable1";
            write_result("Loading attr output names for " + tableName);
            var allOutputNames = knowledge.GetOutputAttrs(tableName);
            for (var i = 0; i < allOutputNames.length; i++)
	        {
		        write_result(allOutputNames[i]);
	        }
	        if (allOutputNames.length == 2 && allOutputNames[0] == "anotherOutput" && allOutputNames[1] == "outputAttr1")
	        {
		        write_result("OK");
	        }
	        else
	        {
		        write_result("FAILURE: Did not load all the output names");
		        return false;
	        }
	        
	        write_result("Loading attr input names for " + tableName);
	        var allInputNames = knowledge.GetInputAttrs(tableName);
	        for (i = 0; i < allInputNames.length; i++)
	        {
		        write_result(allInputNames[i]);
	        }
	        if (allInputNames.length == 2 && allInputNames[0] == "inputAttr1" && allInputNames[1] == "inputAttr2")
	        {
		        write_result("OK");
	        }
	        else
	        {
		        write_result("FAILURE: Did not load all the input names");
		        return false;
	        }
	        
	        write_result("Loading dependency names for " + tableName);
	        var allDepNames = knowledge.GetInputDependencies(tableName);
	        for (i = 0; i < allDepNames.length; i++)
	        {
		        write_result(allDepNames[i]);
	        }
	        if (allDepNames.length == 3 && allDepNames[0] == "inputAttr1" && 
	            allDepNames[1] == "inputAttr2" &&
	            allDepNames[2] == "outsideAttr1")
	        {
		        write_result("OK");
	        }
	        else
	        {
		        write_result("FAILURE: Did not load all the dependency names");
		        return false;
	        }
	        
	        var outputAttr = "outputAttr1";
	        write_result("Getting all possible output values for " + outputAttr);
	        var allOutputs = knowledge.GetAllPossibleOutputs(tableName, outputAttr);
	        for (var i = 0; i < allOutputs.length; i++)
	        {
		        write_result(allOutputs[i]);
	        }
	        if (allOutputs.length == 9 && 
	            allOutputs[0] == "1" && 
	            allOutputs[1] == "2" &&
	            allOutputs[2] == "get(outsideAttr1) with concat" &&
	            allOutputs[3] == "4" &&
	            allOutputs[4] == "5" &&
	            allOutputs[5] == "py(get(outsideAttr1) + 2)" &&
	            allOutputs[6] == "js(get(outsideAttr1) + 2)" &&
	            allOutputs[7] == "js(alterparameter())" &&
	            allOutputs[8] == "py(alterparameter())")
	        {
		        write_result("OK");
	        }
	        else
	        {
		        write_result("FAILURE: Did not load all the possible output values");
		        return false;
	        }
	        
	        write_result("checking the table type for testtable1...");
	        var isGetAll = knowledge.TableIsGetAll(tableName);
	        if (isGetAll)
	            write_result(tableName + " is GetAll as expected");
	        else
	        {
	            write_result("FAILURE: table was not GetAll as expected");
	            return false;
	        }
	        
	        //testing table evaluation
	        write_result("testing evaluation of testtable1 with inputAttr1 = 'C', get first only");
	        knowledge.SetInputValue("inputAttr1", "C");
	        var results2 = knowledge.EvaluateTable(tableName, false);
	        if (ArraySize(results2) == 2 && results2["outputAttr1"][0] == "2")
	        {
	            write_result("OK: " + results2["outputAttr1"][0]);
	        }
	        else
	        {
	            write_result("FAILURE: Did not get proper eval result");
	            alert(results2["outputAttr1"].length);	            
	            alert(ArraySize(results2));
	            alert("'" + results2["outputAttr1"][0] + "'");
		        return false;
	        }
	        
	        write_result("testing evaluation of testtable1 with inputAttr1 = 'C', get all");
	        knowledge.SetInputValue("inputAttr1", "C");
	        var results = knowledge.EvaluateTable(tableName, true);
	        if (ArraySize(results) == 2 && results["outputAttr1"].length == 3 &&
	            results["outputAttr1"][0] == "2" &&
	            results["outputAttr1"][1] == "4" &&
	            results["outputAttr1"][2] == "5")
	        {
	            write_result("OK: " + results["outputAttr1"][0] + "\n" + 
	            results["outputAttr1"][1] + "\n" +
	            results["outputAttr1"][2]);
	        }
	        else
	        {
	            write_result("FAILURE: Did not get proper eval result");
		        return false;
	        }
	        
	        write_result("testing evaluation of testtable1 with inputAttr1 = 'C', inputAttr2 = 10, get all");
	        knowledge.SetInputValue("inputAttr1", "C");
	        knowledge.SetInputValue("inputAttr2", "10");
	        var results3 = knowledge.EvaluateTable(tableName, true);
	        if (ArraySize(results3) == 2 && results3["outputAttr1"].length == 4 &&
	            results3["outputAttr1"][0] == "2" &&
	            results3["outputAttr1"][1] == " with concat" && //empty becuase we never fed it outsideAttr1
	            results3["outputAttr1"][2] == "4" &&
	            results3["outputAttr1"][3] == "5")
	        {
	            write_result("OK: " + results3["outputAttr1"][0] + "\n" + 
	            results3["outputAttr1"][1] + "\n" +
	            results3["outputAttr1"][2] + "\n" + 
	            results3["outputAttr1"][3]);
	        }
	        else
	        {
	            write_result("FAILURE: Did not get proper eval result");
		        return false;
	        }
	        
	        write_result("testing evaluation (Javascript) of testtable1 with inputAttr1 = 'C', inputAttr2 = 78,  outsideAttr1 = 28, get all");
	        knowledge.SetInputValue("inputAttr1", "C");
	        knowledge.SetInputValue("inputAttr2", "78");
	        knowledge.SetInputValue("outsideAttr1", "28");
	        var results4 = knowledge.EvaluateTable(tableName, true);
	        if (ArraySize(results4) == 2 && results4["outputAttr1"].length == 5 &&
	            results4["outputAttr1"][0] == "2" &&
	            results4["outputAttr1"][1] == "28 with concat" && //empty becuase we never fed it outsideAttr1
	            results4["outputAttr1"][2] == "4" &&
	            results4["outputAttr1"][3] == "5"&&
	            results4["outputAttr1"][4] == "30")
	        {
	            write_result("OK: " + results4["outputAttr1"][0] + "\n" + 
	            results4["outputAttr1"][1] + "\n" +
	            results4["outputAttr1"][2] + "\n" + 
	            results4["outputAttr1"][3] + "\n" + 
	            results4["outputAttr1"][4]);
	        }
	        else
	        {
	            write_result("FAILURE: Did not get proper eval result");
		        return false;
	        }
	        
	        write_result("testing evaluation (Javascript) with state parameter on testtable1 with inputAttr1 = 'TestParameterJS' and inputAttr2 = 'TestParameterJS'");
	        knowledge.SetInputValue("inputAttr1", "TestParameterJS");
	        knowledge.SetInputValue("inputAttr2", "TestParameterJS");
	        var result9 = knowledge.EvaluateTableForAttrWithParam(tableName, "outputAttr1", "PassedValue");
	        var retParam = knowledge.GetEvalParameter();
	        write_result(ArraySize(result9));
	        if (ArraySize(result9) == 4 && result9[3] == "eval ok" &&
	            retParam == "PassedValue modified")
	        {
	            write_result("Javascript state parameter working");
	        }
	        else
	        {
	            write_result("FAILURE: Problem with Javascript state parameter: " + result9[3] + ":" + retParam);
	            return false;
	        }      
	        
	        
	        write_result("testing table chaining");
	        knowledge.SetInputValue("inputAttr1", "C");
	        knowledge.SetInputValue("inputAttr2", "78");
	        knowledge.SetInputValue("outsideAttr1", "28");
	        tableName = "testtable2";
	        var result5 = knowledge.EvaluateTableForAttr(tableName, "out1", true);
	        if (result5.length == results4["outputAttr1"].length &&
	            result5[0] == "2" &&
	            result5[1] == "28 with concat" && //empty becuase we never fed it outsideAttr1
	            result5[2] == "4" &&
	            result5[3] == "5"&&
	            result5[4] == "30")
	        {
	            write_result("OK: " + result5[0] + "\n" + 
	            result5[1] + "\n" +
	            result5[2] + "\n" + 
	            result5[3] + "\n" + 
	            result5[4]);
	        }
	        else
	        {
	            write_result("FAILURE: Did not get proper eval result on chain");
		        return false;
	        }
	        
	        write_result("testing input get(), and debug");
	        tableName = "testtable3";
	        knowledge.SetInputValue("someAttr", "3");
	        knowledge.SetDebugHandler(debugHandler);
	        var result6 = knowledge.EvaluateTableForAttr(tableName, "outputAttr1", true);
	        if (result6.length == 1 && result6[0] == "inputAttr2: 78 is greater than someAttr: 3")           
	        {
	            write_result("OK: " + result6[0]);
	        }
	        else
	        {
	            write_result("FAILURE: Did not get proper eval result on get() test");
		        return false;
		    }
	        
	        write_result("testing NULL conditions");
	        knowledge.SetInputValue("inputAttr1", "");
	        knowledge.SetInputValue("inputAttr2", "");
	        var result7 = knowledge.EvaluateTableForAttr("testtable4", "outputAttr1", true);
	        if (result7.length == 4 && result7[2]== "both attrs are NULL")
	        {
		        write_result("OK: " + result7[0] + "\n" + 
		        result7[1] + "\n" + 
		        result7[2] + "\n" + 
		        result7[3]);
	        }
	        else
	        {
	            write_result("FAILURE: Did not get proper eval result on NULL test #1");
	        }
	        
	        knowledge.SetInputValue("inputAttr1", "blah");
	        knowledge.SetInputValue("c", "");
            result7 = knowledge.EvaluateTableForAttr("testtable4", "outputAttr1", true);
            if (result7.length == 2 && result7[0] == "inputAttr2 is NULL")
            {
                write_result("OK: " + result7[0] + "\n" +
                result7[1]);
            }
            else
            {
                write_result("FAILURE: Did not get proper eval result on NULL test #2");
            }

	        knowledge.SetInputValue("inputAttr1", "blah");
	        knowledge.SetInputValue("c", "");
	        result7 = knowledge.EvaluateTableForAttr("testtable4", "outputAttr1", true);
	        if (result7.length == 2 && result7[0] == "inputAttr2 is NULL")
	        {
		        write_result("OK: " + result7[0] + "\n" +
		        result7[1]);
	        }
	        else
	        {
	            write_result("FAILURE: Did not get proper eval result on NULL test");
	        }

            write_result("testing exclusing evaluation");
	        knowledge.SetInputValue("inputAttr1", "A");
	        var result8 = knowledge.EvaluateTableForAttr("exclusion", "outputAttr1", true);
	        if (ArraySize(result8) == 4 && result8[0] == "not X or Y" &&
		        result8[1] == "not X" &&
		        result8[2] == "not Y" &&
		        result8[3] == "fallout")
	        {
		        write_result("OK: " + result8[0] + "\n" +
		        result8[1] + "\n" +
		        result8[2] + "\n" +
		        result8[3]);
	        }
	        else
	        {
		        write_result("FAILURE: Did not get proper eval result on exclusion test");
	        }

	        write_result("allowing a match: Y");
	        knowledge.SetInputValue("inputAttr1", "Y");
	        result8 = knowledge.EvaluateTableForAttr("exclusion", "outputAttr1", true);
	        if (ArraySize(result8) == 4 && result8[0] == "is X or Y" &&
		        result8[1] == "not X" &&
		        result8[2] == "is Y" &&
		        result8[3] == "fallout")
	        {
		         write_result("OK: " + result8[0] + "\n" +
		        result8[1] + "\n" +
		        result8[2] + "\n" +
		        result8[3]);
	        }
	        else
	        {
		        write_result("FAILURE: Did not get proper eval result on exclusion test #2");
	        }
	        
	        write_result("testing translation of: A");
	        var localeValue = knowledge.Localize("A", "en-US");
	        var reverse = knowledge.DeLocalize(localeValue);
	        write_result(localeValue + ":" + reverse);
	        if (localeValue == "A trans" && reverse == "A")
	            write_result("OK");
	        else
	            write_result("FAILURE: translation failed");  
	            
	        write_result("testing reverse evaluation of ReverseTest table");
	        knowledge.SetInputValue("OutColor","green");
	        var result9 = knowledge.ReverseEvaluateTable("ReverseTest", true);
	        if (ArraySize(result9) == 2 && result9["Color1"][0] == "blue" &&
	            result9["Color2"][0] == "yellow")
	        {
		        write_result("OK: " + result9["Color1"][0] + ", " + result9["Color2"][0]);
	        }
	        else
	        {
		        write_result("FAILURE: reverse evaluation failed");
	        }          
            	       
            return false;
        }
        
        function debugHandler(str)
        {
            alert("DEBUGGING:\n" + str);
        }

        function btnTest2_onclick() 
        {
            var start = 0; var elapsed = 0; var testROMTreeStart = 0; var testROMTreeEnd = 0; var testROMNodeStart = 0; var testROMNodeEnd = 0;
            var msg = new String();
            var iMax = 1000;
            try
            {
                clear_results();

                write_result("Test ROMNode Objects");
                write_result("Creating root node");
                var rootNode = new ROMNode("Test Application");
                write_result("Root ROMNode created");

                write_result("Setting some attributes");
                rootNode.SetAttribute("inputAttr1", "some value of test1");
                rootNode.SetAttribute("inputAttr2", "some value of test2");
                rootNode.SetAttribute("inputAttr3", "some value of test3");
                rootNode.SetAttributeValue("inputAttr3", "test3a", "some sub value of attr3_a");
                rootNode.SetAttributeValue("inputAttr3", "test3b", "some sub value of attr3_b");
                write_result("Attrs Set");
    		    
                write_result("Testing what we have set");
                write_result("inputAttr1 = " + rootNode.GetAttribute("inputAttr1", true));

	            write_result("Creating a child object");
	            var childNode = new ROMNode("ChildObject");
	            rootNode.AddChildROMObject(childNode);
	            childNode.SetAttribute("childAttr", "some value of value");
	            //setting a value on the Object Node
	            childNode.SetROMObjectValue("valueTest", "myValue");
	            var childOfChild = new ROMNode("ChildObject2");
	            childNode.AddChildROMObject(childOfChild);
	            var findTest = rootNode.FindAllObjectsByID("ChildObject", true);
	            var findTestXPATH = rootNode.FindObjects("//Object[@id='ChildObject']");
	            var findTestXPATH2 = rootNode.FindObjects("//Object[@id='ChildObject2']");
                if (ArraySize(findTest) == 1 && ArraySize(findTestXPATH) == 1 && ArraySize(findTestXPATH2) == 1 &&
                    findTest[0].GetROMGUID() == findTestXPATH[0].GetROMGUID() &&
                    findTestXPATH2[0].GetROMObjectID() == "ChildObject2")
                    write_result("OK");
                else
                    write_result("FAILURE creating/obtaining child object"); 

	            write_result("Dump current xml state");
	            var result = rootNode.SaveXML(true);
	            write_result(result);
				
				write_result("Testing clone");
				var clone = rootNode.Clone();
	            var findTest = clone.FindAllObjectsByID("ChildObject", true);
	            var findTestXPATH = clone.FindObjects("//Object[@id='ChildObject']");
	            var findTestXPATH2 = clone.FindObjects("//Object[@id='ChildObject2']");
                if (ArraySize(findTest) == 1 && ArraySize(findTestXPATH) == 1 && ArraySize(findTestXPATH2) == 1 &&
                    findTest[0].GetROMGUID() == findTestXPATH[0].GetROMGUID() &&
                    findTestXPATH2[0].GetROMObjectID() == "ChildObject2")
                    write_result("Clone OK");
                else
                    write_result("FAILURE cloning/obtaining child object"); 

	            write_result("Dump clone xml state");
	            var result = clone.SaveXML(true);
	            write_result(result);

	            write_result("Setting attrs to test eval, inputAttr1 = A, inputAttr2 = 1");
	            rootNode.SetAttribute("inputAttr1", "A");
	            rootNode.SetAttribute("inputAttr2", "1");
    	
	            write_result("New xml state");
	            result = rootNode.SaveXML(true);
	            write_result(result);
    	        
	            write_result("Getting attribute list on the base object");
                var allAttrs = rootNode.GetAllAttributes();
                for (var it in allAttrs)
                {
	                var attrName = it;
	                var kvp = allAttrs[it];
	                write_result("Name: " + attrName);
	                for (var it_kvp in kvp)
	                {
	                    write_result("Key: " + it_kvp + " Value: " + kvp[it_kvp]);
	                }
                }

	            write_result("loading rules");
	            //if (rootNode.LoadRulesFromString(rules))
	            if (rootNode.LoadRules("test_project.xml"))
	            {
		            write_result("...loaded");
		            //deubg
                    rootNode.SetRulesDebugHandler(debugHandler);
		            write_result("Evaluating table testtable1");
		            var res = rootNode.EvaluateTableForAttr("testtable1", "outputAttr1", true);
		            for (var i = 0; i < res.length; i++)
		            {
			            write_result(res[i]);
		            }
		            write_result("Evaluation complete");

		            write_result("Evaluating table testtable2: out1");
		            var res2 = rootNode.EvaluateTableForAttr("testtable2", "out1", true);
		            for (var i = 0; i < res2.length; i++)
		            {
			            write_result(res2[i]);
		            }
		            write_result("Evaluation complete");
    	        
    	        
	                write_result("Testing the LinearEngine object");
                    var engine = new LinearEngine(rootNode, "Dictionary");

                    write_result("Checking dictionary size");
                    var attrs = engine.GetAllDictionaryAttrs();
                    if (ArraySize(attrs) == 6)
                        write_result("size ok");
                    else
                        write_result("FAILURE loading dictionary:" + ArraySize(attrs));

                    var order = engine.GetEvalList();
                    if (order != null && order.length == 6 &&
                        order[0].Name == "cDictAttr1" &&
                        order[1].Name == "dDictAttr2" &&
                        order[2].Name == "aDictAttr3" &&
                        order[3].Name == "bDictAttr4" &&
                        order[4].Name == "eDictAttr5" &&
                        order[5].Name == "eDictAttr6")
                        write_result("Order OK");
                    else
                        write_result("FAILURE to assess the evaluation order:" + order.length + order[0].Name);

                    var triggers = engine.GetTriggers();
                    if (ArraySize(triggers) == 3 &&
				        triggers["aDictAttr3"].length == 2 &&
				        triggers["aDictAttr3"][0] == "bDictAttr4" &&
				        triggers["aDictAttr3"][1] == "eDictAttr5")
				        write_result("Triggers OK");
			        else
				        write_result("FAILURE to assess the triggers");
				    
                    write_result("Testing evaluation");
                    engine.EvaluateAll();
                    var attr1 = engine.GetDictionaryAttr("cDictAttr1");
                    var attr2 = engine.GetDictionaryAttr("dDictAttr2");
                    if (attr2.AvailableValues.length == 0 && attr2.PossibleValues.length == 3 &&
                        attr1.AvailableValues.length == 4)
                        write_result("Default Eval OK");
                    else
                        write_result("FAILURE to initially evaluate an attribute");

                    engine.EvaluateForAttribute("cDictAttr1", attr1.AvailableValues[0], true);
                    var val_pick1 = rootNode.GetAttribute("dDictAttr2", true);
                    var val_bool1 = rootNode.GetAttribute("aDictAttr3", true);
                    var val_multi1 = rootNode.GetAttribute("bDictAttr4", true);
                    var edit1 = rootNode.GetAttribute("eDictAttr5", true);
                    engine.EvaluateForAttribute("cDictAttr1", attr1.AvailableValues[1], true);
                    var val_pick2 = rootNode.GetAttribute("dDictAttr2", true);
                    var val_bool2 = rootNode.GetAttribute("aDictAttr3", true);
                    engine.EvaluateForAttribute("cDictAttr1", attr1.AvailableValues[2], true);            
                    var val_bool3 = rootNode.GetAttribute( "aDictAttr3", true);
                    var val_multi3 = rootNode.GetAttribute( "bDictAttr4", true);
                    engine.EvaluateForAttribute("eDictAttr5", "999", true);
                    var edit4 = rootNode.GetAttribute("eDictAttr5", true);
                    if (val_pick1 == "ResultByOption1" && val_pick2 == "Result2" &&
                        val_bool1 == "Y" && val_bool2 == "Y" && val_bool3 == "N" &&
                        val_multi1 == "Selection2|Selection3" && val_multi3 == "Selection2" &&
                        edit1 == "10" && edit4 == "50")
                    {
                        write_result("Evaluation of attributes ok");
                    }
                    else
                    {
                        write_result("FAILURE to evaluate an attribute");
                        write_result("val_pick1:" + val_pick1 + " should be ResultByOption1");
                        write_result("val_bool1:" + val_bool1 + " should be Y");
                        write_result("val_multi1:" + val_multi1 + " should be Selection2|Selection3");
                        write_result("edit1:" + edit1 + " should be 10");
                        write_result("val_pick2:" + val_pick2 + " should be Result2");
                        write_result("val_bool2:" + val_bool2 + " should be Y");
                        write_result("val_bool3:" + val_bool3 + " should be N");
                        write_result("val_multi3:" + val_multi3 + " should be Selection2");
                        write_result("edit4:" + edit4 + " should be 50");
                    }
                }
                else 
                {
                    write_result("Could not load rules");
                }
                
                start = 0;
                start = getTickCount();
                testROMTreeStart = start;
                write_result("Stress Testing...");
                write_result("Setting a bunch of values...");
                for (var i = 0; i < iMax; i++)
                {
	                var attrToSet = "attr";
	                attrToSet+=i.toString();
	                rootNode.SetAttribute(attrToSet, i.toString());
                }
                write_result("Retrieving a bunch of values...");
                for (var i = 0; i < iMax; i++)
                {
	                var attrToGet = "attr";
	                attrToGet += i.toString();
	                rootNode.GetAttribute(attrToGet, true);
                }
                elapsed = getTickCount() - start;
                msg = "attribute test complete in ";
                msg += elapsed.toString();
                msg+="ms";
                write_result(msg);

                start = getTickCount();
                write_result("Create a large object hierarchy for query testing");
                for (i = 0; i < iMax; i++)
                {
	                var objectToCreate = "SubLevel1Object";
	                objectToCreate += i.toString();
	                var newNode = new ROMNode(objectToCreate);
	                rootNode.AddChildROMObject(newNode);

	                objectToCreate = "SubLevel2Object";
	                objectToCreate+=i.toString();
	                var newNode2 = new ROMNode(objectToCreate);
	                newNode.AddChildROMObject(newNode2);
	                newNode2.SetAttribute("sumtester", "1");
	                newNode2.SetAttribute("sumtester2", "2");
	                newNode2.SetAttribute("sumtester3", "3");
	                newNode2.SetAttribute("testvalue", "value found");
                }
                elapsed = getTickCount() - start;
                msg = "objects created in ";
                msg += elapsed.toString();
                msg+="ms";
                write_result(msg);

                write_result("Performing queries");
                start = getTickCount();
                var queryTime = start;
                var xpath = "sum(//Attribute[@id='sumtester']/@value)";
                var xpathRes = rootNode.EvaluateXPATH(xpath);
                elapsed = getTickCount() - start;
                write_result(xpath + " result: " + xpathRes);
                msg = "object query test complete in ";
                msg += elapsed.toString();
                msg+="ms";
                write_result(msg);

                start = getTickCount();
                var xpath2 = "sum(//Attribute[@id='sumtester2']/@value)";
                var xpathRes2 = rootNode.EvaluateXPATH(xpath2);
                elapsed = getTickCount() - start;
                write_result(xpath2 + " result: " + xpathRes2);
                msg = "object query test complete in ";
                msg += elapsed.toString();
                msg+="ms";
                write_result(msg);

                write_result("altering the object state");
                rootNode.SetAttribute("Change", "Y");

                start = getTickCount();
                var xpath3 = "sum(//Attribute[@id='sumtester3']/@value)";
                var xpathRes3 = rootNode.EvaluateXPATH(xpath3);
                elapsed = getTickCount() - start;
                write_result(xpath3 + " result: " + xpathRes3);
                msg = "object query test complete in ";
                msg += elapsed.toString();
                msg+="ms";
                write_result(msg);

                start = getTickCount();
                var xpath4 = "//Object[@id='SubLevel2Object10']/Attribute[@id='testvalue']/@value";
                var xpathRes4 = rootNode.EvaluateXPATH(xpath4);
                var finished = getTickCount();
                testROMTreeEnd = finished;
                elapsed = finished - start;
                write_result(xpath4 + " result: " + xpathRes4);
                msg = "object query test complete in ";
                msg += elapsed.toString();
                msg+="ms";
                write_result(msg);

                elapsed = finished - queryTime;
                msg = "All object query tests completed in ";
                msg += elapsed.toString();
                msg+="ms";
                write_result(msg);
            }
            catch(err)
            {
                ReportError(err);  
            }
		}       
        
        
        function write_result(res)
        {
            var textArea = document.getElementById("resultsText");
            textArea.value += res + "\n";
        }

        function clear_results() 
        {
            var textArea = document.getElementById("resultsText");
            textArea.value = "";
        }
        
        function getTickCount()
        {            
            var now = new Date();
            var ticks = now.getTime();
            return ticks;
        }
        
//                clear_results();

//                write_result("Test ROMTree Objects");
//                write_result("Creating application/doc object myBaseObject");
//                var myBaseObject = new ROMTree("Test Application");
//                write_result("myBaseObject created:\n" + myBaseObject.DumpTree());

//                write_result("Getting the root node");
//                var myRootNode = myBaseObject.GetRoot();
//                if (myRootNode != null)
//                  write_result("Root obtained");
//                else
//                {
//                    write_result("FAILURE");
//                    return;
//                }

//                write_result("Setting some attributes");
//                myBaseObject.SetAttribute(myRootNode, "inputAttr1", "some value of test1");
//                myBaseObject.SetAttribute(myRootNode, "inputAttr2", "some value of test2");
//                myBaseObject.SetAttributeValue(myRootNode, "inputAttr3", "some value of test3");
//                myBaseObject.SetAttributeValue(myRootNode, "inputAttr3", "test3a", "some sub value of attr3_a");
//                myBaseObject.SetAttributeValue(myRootNode, "inputAttr3", "test3b", "some sub value of attr3_b");
//                write_result("Attrs Set");
//    		    
//                write_result("Testing what we have set");
//                write_result("inputAttr1 = " + myBaseObject.GetAttributeValue(myRootNode, "inputAttr1", true));

//	            write_result("Creating a child object");
//	            var childNode = myBaseObject.CreateROMObject("ChildObject");
//	            myBaseObject.AddChildROMObject(myRootNode, childNode);
//	            myBaseObject.SetAttribute(childNode, "childAttr", "some value of value");
//	            //setting a value on the Object Node
//	            myBaseObject.SetROMObjectValue(childNode, "valueTest", "myValue");

//	            write_result("Dump current xml state");
//	            var result = myBaseObject.DumpTree();
//	            write_result(result);

//	            write_result("Setting attrs to test eval, inputAttr1 = A, inputAttr2 = 1");
//	            myBaseObject.SetAttribute(myRootNode, "inputAttr1", "A");
//	            myBaseObject.SetAttribute(myRootNode, "inputAttr2", "1");
//    	
//	            write_result("New xml state");
//	            result = myBaseObject.DumpTree();
//	            write_result(result);
//    	        
////	            write_result("Getting attribute list on the base object");
////                var allAttrs = myBaseObject.GetAllAttributes(myRootNode);
////                for (var it in allAttrs)
////                {
////	                var attrName = it;
////	                var kvp = allAttrs[it];
////	                write_result("Name: " + attrName);
////	                for (var it_kvp in kvp)
////	                {
////	                    write_result("Key: " + it_kvp + " Value: " + kvp[it_kvp]);
////	                }
////                }

//	            write_result("loading rules");
//	            if (myBaseObject.LoadRules("test_project.xml"))
//	            {
//		            write_result("...loaded");
//		            //deubg
//                    myBaseObject.SetRulesDebugHandler(debugHandler);
//		            write_result("Evaluating table testtable1");
//		            var res = myBaseObject.EvaluateTableForAttr(myRootNode, "testtable1", "outputAttr1", true);
//		            for (var i = 0; i < res.length; i++)
//		            {
//			            write_result(res[i]);
//		            }
//		            write_result("Evaluation complete");

//		            write_result("Evaluating table testtable2: out1");
//		            var res2 = myBaseObject.EvaluateTableForAttr(myRootNode, "testtable2", "out1", true);
//		            for (var i = 0; i < res2.length; i++)
//		            {
//			            write_result(res2[i]);
//		            }
//		            write_result("Evaluation complete");
//    	        
//    	        
//	                write_result("Testing the LinearEngine object");
//                    var engine = new LinearEngine(myBaseObject, myRootNode, "Dictionary");

//                    write_result("Checking dictionary size");
//                    var attrs = engine.GetAllDictionaryAttrs();
//                    if (ArraySize(attrs) == 5)
//                        write_result("size ok");
//                    else
//                        write_result("FAILURE loading dictionary:" + ArraySize(attrs));

//                    var order = engine.GetEvalList();
//                    if (order != null && order.length == 5 &&
//                        order[0].Name == "cDictAttr1" &&
//                        order[1].Name == "dDictAttr2" &&
//                        order[2].Name == "aDictAttr3" &&
//                        order[3].Name == "bDictAttr4" &&
//                        order[4].Name == "eDictAttr5")
//                        write_result("Order OK");
//                    else
//                        write_result("FAILURE to assess the evaluation order:" + order.length + order[0].Name);

//                    write_result("Testing evaluation");
//                    engine.EvaluateAll();
//                    var attr1 = engine.GetDictionaryAttr("cDictAttr1");
//                    var attr2 = engine.GetDictionaryAttr("dDictAttr2");
//                    if (attr2.AvailableValues.length == 0 && attr2.PossibleValues.length == 3 &&
//                        attr1.AvailableValues.length == 4)
//                        write_result("Default Eval OK");
//                    else
//                        write_result("FAILURE to initially evaluate an attribute");

//                    engine.EvaluateForAttribute("cDictAttr1", attr1.AvailableValues[0], true);
//                    var val_pick1 = myBaseObject.GetAttributeValue(myRootNode, "dDictAttr2", true);
//                    var val_bool1 = myBaseObject.GetAttributeValue(myRootNode, "aDictAttr3", true);
//                    var val_multi1 = myBaseObject.GetAttributeValue(myRootNode, "bDictAttr4", true);
//                    var edit1 = myBaseObject.GetAttributeValue(myRootNode, "eDictAttr5", true);
//                    engine.EvaluateForAttribute("cDictAttr1", attr1.AvailableValues[1], true);
//                    var val_pick2 = myBaseObject.GetAttributeValue(myRootNode, "dDictAttr2", true);
//                    var val_bool2 = myBaseObject.GetAttributeValue(myRootNode, "aDictAttr3", true);
//                    engine.EvaluateForAttribute("cDictAttr1", attr1.AvailableValues[2], true);            
//                    var val_bool3 = myBaseObject.GetAttributeValue(myRootNode, "aDictAttr3", true);
//                    var val_multi3 = myBaseObject.GetAttributeValue(myRootNode, "bDictAttr4", true);
//                    engine.EvaluateForAttribute("eDictAttr5", "999", true);
//                    var edit4 = myBaseObject.GetAttributeValue(myRootNode, "eDictAttr5", true);
//                    if (val_pick1 == "ResultByOption1" && val_pick2 == "Result2" &&
//                        val_bool1 == "Y" && val_bool2 == "Y" && val_bool3 == "N" &&
//                        val_multi1 == "Selection2|Selection3" && val_multi3 == "Selection2" &&
//                        edit1 == "10" && edit4 == "50")
//                    {
//                        write_result("Evaluation of attributes ok");
//                    }
//                    else
//                    {
//                        write_result("FAILURE to evaluate an attribute");
//                        write_result("val_pick1:" + val_pick1 + " should be ResultByOption1");
//                        write_result("val_bool1:" + val_bool1 + " should be Y");
//                        write_result("val_multi1:" + val_multi1 + " should be Selection2|Selection3");
//                        write_result("edit1:" + edit1 + " should be 10");
//                        write_result("val_pick2:" + val_pick2 + " should be Result2");
//                        write_result("val_bool2:" + val_bool2 + " should be Y");
//                        write_result("val_bool3:" + val_bool3 + " should be N");
//                        write_result("val_multi3:" + val_multi3 + " should be Selection2");
//                        write_result("edit4:" + edit4 + " should be 50");
//                    }
//                }
//                else 
//                {
//                    write_result("Could not load rules");
//                }
//                
//                start = 0;
//                start = getTickCount();
//                testROMTreeStart = start;
//                write_result("Stress Testing...");
//                write_result("Setting a bunch of values...");
//                for (var i = 0; i < iMax; i++)
//                {
//	                var attrToSet = "attr";
//	                attrToSet+=i.toString();
//	                myBaseObject.SetAttribute(myRootNode, attrToSet, i.toString());
//                }
//                write_result("Retrieving a bunch of values...");
//                for (var i = 0; i < iMax; i++)
//                {
//	                var attrToGet = "attr";
//	                attrToGet += i.toString();
//	                myBaseObject.GetAttributeValue(myRootNode, attrToGet, true);
//                }
//                elapsed = getTickCount() - start;
//                msg = "attribute test complete in ";
//                msg += elapsed.toString();
//                msg+="ms";
//                write_result(msg);

//                start = getTickCount();
//                write_result("Create a large object hierarchy for query testing");
//                for (i = 0; i < iMax; i++)
//                {
//	                var objectToCreate = "SubLevel1Object";
//	                objectToCreate += i.toString();
//	                var newNode = myBaseObject.CreateROMObject(objectToCreate);
//	                myBaseObject.AddChildROMObject(myRootNode, newNode);

//	                objectToCreate = "SubLevel2Object";
//	                objectToCreate+=i.toString();
//	                var newNode2 = myBaseObject.CreateROMObject(objectToCreate);
//	                myBaseObject.AddChildROMObject(newNode, newNode2);
//	                myBaseObject.SetAttribute(newNode2, "sumtester", "1");
//	                myBaseObject.SetAttribute(newNode2, "sumtester2", "2");
//	                myBaseObject.SetAttribute(newNode2, "sumtester3", "3");
//	                myBaseObject.SetAttribute(newNode2, "testvalue", "value found");
//                }
//                elapsed = getTickCount() - start;
//                msg = "objects created in ";
//                msg += elapsed.toString();
//                msg+="ms";
//                write_result(msg);

//                write_result("Performing queries");
//                start = getTickCount();
//                var queryTime = start;
//                var xpath = "sum(//Attribute[@id='sumtester']/@value)";
//                var xpathRes = myBaseObject.EvaluateXPATH(myRootNode, xpath);
//                elapsed = getTickCount() - start;
//                write_result(xpath + " result: " + xpathRes);
//                msg = "object query test complete in ";
//                msg += elapsed.toString();
//                msg+="ms";
//                write_result(msg);

//                start = getTickCount();
//                var xpath2 = "sum(//Attribute[@id='sumtester2']/@value)";
//                var xpathRes2 = myBaseObject.EvaluateXPATH(myRootNode, xpath2);
//                elapsed = getTickCount() - start;
//                write_result(xpath2 + " result: " + xpathRes2);
//                msg = "object query test complete in ";
//                msg += elapsed.toString();
//                msg+="ms";
//                write_result(msg);

//                write_result("altering the object state");
//                myBaseObject.SetAttribute(myRootNode, "Change", "Y");

//                start = getTickCount();
//                var xpath3 = "sum(//Attribute[@id='sumtester3']/@value)";
//                var xpathRes3 = myBaseObject.EvaluateXPATH(myRootNode, xpath3);
//                elapsed = getTickCount() - start;
//                write_result(xpath3 + " result: " + xpathRes3);
//                msg = "object query test complete in ";
//                msg += elapsed.toString();
//                msg+="ms";
//                write_result(msg);

//                start = getTickCount();
//                var xpath4 = "//Object[@id='SubLevel2Object10']/Attribute[@id='testvalue']/@value";
//                var xpathRes4 = myBaseObject.EvaluateXPATH(myRootNode, xpath4);
//                var finished = getTickCount();
//                testROMTreeEnd = finished;
//                elapsed = finished - start;
//                write_result(xpath4 + " result: " + xpathRes4);
//                msg = "object query test complete in ";
//                msg += elapsed.toString();
//                msg+="ms";
//                write_result(msg);

//                elapsed = finished - queryTime;
//                msg = "All object query tests completed in ";
//                msg += elapsed.toString();
//                msg+="ms";
//                write_result(msg);
    </script>
</head>
<body>
    <div>
        <button id="btnTest" onclick="btnTest_onclick()" type="button" >Test EDSEngineJS</button>
        <button id="btnTest2" onclick="btnTest2_onclick()" type="button" >Test ROMJS</button>
    </div>
    <div>
        <textarea id="resultsText" cols="100" rows="100" ></textarea>
    </div>
</body>
</html>
