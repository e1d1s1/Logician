<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx" initialize="Initialize()">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:Canvas x="0" y="0" width="100%" height="100%" id="layoutRoot">
		<mx:VBox>
			<mx:Grid>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label text="lbCylinderSeries" name="lbCylinderSeries" /></mx:GridItem>
					<mx:GridItem>
						<mx:ComboBox id="CylinderSeries" name="CylinderSeries" change="comboEvaluate(event)">
						</mx:ComboBox></mx:GridItem>
					<mx:GridItem></mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label text="lbMountingStyle" name="lbMountingStyle" /></mx:GridItem>
					<mx:GridItem>
						<mx:ComboBox id="MountingStyle" name="MountingStyle" change="comboEvaluate(event)">
						</mx:ComboBox></mx:GridItem>
					<mx:GridItem></mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem></mx:GridItem>
					<mx:GridItem>
						<mx:Label text="lbBoreDiameter" name="lbBoreDiameter" /></mx:GridItem>
					<mx:GridItem>
						<mx:Label text="lbRodDiameter" name="lbRodDiameter" /></mx:GridItem>            
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem></mx:GridItem>
					<mx:GridItem>
						<mx:ComboBox id="BoreDiameter" name="BoreDiameter" change="comboEvaluate(event)">
						</mx:ComboBox></mx:GridItem>
					<mx:GridItem>
						<mx:ComboBox id="RodDiameter" name="RodDiameter" change="comboEvaluate(event)">
						</mx:ComboBox></mx:GridItem>            
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label text="lbRodEndTypes" name="lbRodEndTypes" /></mx:GridItem>
					<mx:GridItem>
						<mx:ComboBox id="RodEndTypes" name="RodEndTypes" change="comboEvaluate(event)">
						</mx:ComboBox></mx:GridItem>
					<mx:GridItem></mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label text="lbSealingSystem" name="lbSealingSystem" /></mx:GridItem>
					<mx:GridItem>
						<mx:ComboBox id="SealingSystem" name="SealingSystem" change="comboEvaluate(event)">
						</mx:ComboBox></mx:GridItem>
					<mx:GridItem></mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label text="lbPorts" name="lbPorts"/></mx:GridItem>
					<mx:GridItem>
						<mx:ComboBox id="Ports" name="Ports" change="comboEvaluate(event)">
						</mx:ComboBox></mx:GridItem>
					<mx:GridItem></mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem></mx:GridItem>
					<mx:GridItem>
						<mx:Label text="lbPortLocationHead" name="lbPortLocationHead" /></mx:GridItem>
					<mx:GridItem>
						<mx:Label text="lbPortLocationCap" name="lbPortLocationCap" /></mx:GridItem>            
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem></mx:GridItem>
					<mx:GridItem>
						<mx:ComboBox id="PortLocationHead" name="PortLocationHead" change="comboEvaluate(event)">
						</mx:ComboBox></mx:GridItem>
					<mx:GridItem>
						<mx:ComboBox id="PortLocationCap" name="PortLocationCap" change="comboEvaluate(event)">
						</mx:ComboBox></mx:GridItem>            
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label text="Port Location"/></mx:GridItem>
					<mx:GridItem>
						<mx:Label text="lbCushionHead" name="lbCushionHead" /></mx:GridItem>
					<mx:GridItem>
						<mx:Label text="lbCushionCap0" name="lbCushionCap" /></mx:GridItem>            
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label text="Cushion Locations"/></mx:GridItem>
					<mx:GridItem>
						<mx:ComboBox id="CushionHead" name="CushionHead" change="comboEvaluate(event)">
						</mx:ComboBox></mx:GridItem>
					<mx:GridItem>
						<mx:ComboBox id="CushionCap" name="CushionCap" change="comboEvaluate(event)">
						</mx:ComboBox></mx:GridItem>            
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label text="lbCylinderStroke" name="lbCylinderStroke" /></mx:GridItem>
					<mx:GridItem>
						<mx:TextInput id="CylinderStroke" name="CylinderStroke" focusIn="txtBeginEdit(event)" focusOut="txtTextChanged(event)"/>
					</mx:GridItem>
					<mx:GridItem></mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label text="lbAdditionalOption" name="lbAdditionalOption" /></mx:GridItem>
					<mx:GridItem>
						<mx:ComboBox id="AdditionalOption" name="AdditionalOption" change="comboEvaluate(event)">
						</mx:ComboBox></mx:GridItem>
					<mx:GridItem></mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem></mx:GridItem>
					<mx:GridItem>
						<mx:Label text="lbExtraRodProtection" name="lbExtraRodProtection" /></mx:GridItem>
					<mx:GridItem>
						<mx:Label text="Position"/></mx:GridItem>            
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem></mx:GridItem>
					<mx:GridItem>
						<mx:TextInput id="ExtraRodProtection" name="ExtraRodProtection" focusIn="txtBeginEdit(event)" focusOut="txtTextChanged(event)"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:Grid>
							<mx:GridRow>
								<mx:GridItem>
									<mx:Label text="lbOptionHead" name="lbOptionHead" />
								</mx:GridItem>
								<mx:GridItem>
									<mx:Label text="lbOptionCap" name="lbOptionCap" />
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow>
								<mx:GridItem>
									<mx:ComboBox id="OptionHead" name="OptionHead" change="comboEvaluate(event)">
									</mx:ComboBox>
								</mx:GridItem>
								<mx:GridItem>
									<mx:ComboBox id="OptionCap" name="OptionCap" change="comboEvaluate(event)">
									</mx:ComboBox>
								</mx:GridItem>
							</mx:GridRow>
						</mx:Grid>
					</mx:GridItem>            
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem></mx:GridItem>
					<mx:GridItem>
						<mx:Label text="Catalog#:"/></mx:GridItem>
					<mx:GridItem><mx:Label id = "Catalog"/></mx:GridItem>
				</mx:GridRow>
			</mx:Grid>

			<mx:Grid>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Button id="btnSaveConfig" label="Save Config XML" click="SaveConfig()"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:Button id="btnLoadXML" label="Load Config XML" click="LoadConfig()"/>
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
			<mx:TextArea id="txtXML" name="txtXML" width="100%" height="400" />


			<mx:Button id="btnClear" label="Clear Debug" click="ClearDebug()"/>
			<mx:HBox>
				<mx:Label text="Filter for table:"/>
				<mx:TextInput id="filter"/>
				<mx:CheckBox id="chkDebug" label="Enable Debug" selected="false" click="EnableDebug(event)"/>
			</mx:HBox>
			<mx:TextArea id="debug" width="100%" height="250" />
		</mx:VBox>
	</mx:Canvas>
	<fx:Script>
		<![CDATA[
		import Logician.*;
		import mx.controls.*;
		import mx.core.Container;
		import mx.events.ListEvent;
		
		var m_rootNode:ROMNode = null;
		var m_engine:LinearEngine = null;
		var bLoadingItems:Boolean = false;
		
		 function Initialize():void {
            SetupApplication();
        }
		
		function ReportError(err:Error)
		{
			Alert.show(err.message);
		}

        function SetupApplication():void {
            try {
                m_rootNode = new ROMNode("HydraulicCylinder");
                if (!m_rootNode.LoadRules("HydraulicCylinderRules.xml")) {
                    Alert.show("Error loading rules file");
                    return;
                }

                m_rootNode.DebugCallback = DebugCallback;
                m_engine = new LinearEngine(m_rootNode, "HydraulicCylinderDictionary");
                m_engine.EvaluateAll();

                UpdateControls();
            }
            catch (err) {
                ReportError(err);
            }
        }

        function DebugCallback(msg):void {
            var tableName = filter.text;
            if (tableName.length > 0) {
                var newMsg = "";
                var indexStart = msg.indexOf("<TableEval name=\"" + tableName);
                if (indexStart >= 0) {
                    var indexEnd = msg.indexOf("</TableEval>", indexStart);
                    indexEnd += 12;
                    newMsg = msg.substr(indexStart, indexEnd);
                }
                msg = newMsg;
            }
            debug.text += msg;
        }

        function ClearDebug():void {            
            debug.text = "";
        }

        function UpdateControls():void {
            bLoadingItems = true;

            var allAttrs = m_engine.GetAllDictionaryAttrs();
            for (var key in allAttrs)
                SetControlUI(allAttrs[key]);
            bLoadingItems = false;
            UpdateCatalog();
        }

        function UpdateCatalog():void {
            //catalog number is the concat of all the chars returned from the CatalogNumber table evaluation
            var allChars = m_rootNode.EvaluateTableForAttr("CatalogNumber", "Code");
            var Catnum = "";
            for (var i = 0; i < allChars.length; i++)
                Catnum += allChars[i];

            Catalog.text = Catnum;            
        }
		
		function GetChildControl(container:Container, id:String):Object
		{
			var retVal:Object = null;
			
			try
			{
				//work down recursively from the passed object
				retVal = container.getChildByName(id);
				if (retVal == null)
				{
					var children:Array = container.getChildren();
					if (children.length > 0)
					{
						//serach each child canvas/panel
						for (var i:int = 0; i < children.length; i++)
						{
			
							var nextContainer:Container = null;							
							try
							{
								nextContainer = Container(children[i]);
								retVal = GetChildControl(nextContainer, id);
							}
							catch(e:Error)
							{
								nextContainer = null;
							}
							if (retVal != null)
								break;						
						}		  				    			
					}			    	
				}
			}
			catch(e:Error)
			{
				Alert.show("GetChildControl error: " + e.toString());
			}
			
			return retVal;
		}

        function SetControlUI(attr:ROMDictionaryAttribute):void {
            var ctrlObj:Object = GetChildControl(layoutRoot, attr.Name);
            var labelObj:Object = GetChildControl(layoutRoot, "lb" + attr.Name);

            if (ctrlObj != null) {
                if (ctrlObj is ComboBox)
				{
					//alert(attr.Name + " " + attr.AvailableValues.length + ":" + m_rootNode.GetAttribute(attr.Name, true));
					var combo:ComboBox = ctrlObj as ComboBox;
					combo.dataProvider = attr.AvailableValues;
					if (attr.AvailableValues.length > 0)
					{
						var val:String = m_rootNode.GetAttribute(attr.Name, true);
						combo.selectedIndex = attr.AvailableValues.indexOf(val);
					}
					combo.enabled = attr.Enabled;
				}
				if (ctrlObj is TextInput)
				{
					var textCtrl:TextInput = ctrlObj as TextInput;
					textCtrl.text = m_rootNode.GetAttribute(attr.Name, true);
					textCtrl.enabled = attr.Enabled;
                }

                if (labelObj != null) {        
                    var makeBold:Boolean = false;
					var label:Label = labelObj as Label;
					label.text = attr.Description;
                    if (attr.ChangedByUser == true)
                        makeBold = true;

                    if (attr.Valid == true) {
                        if (attr.Enabled == true)
                            label.setStyle("color", "black");
                        else
                            label.setStyle("color", "gray");
                    }
                    else
                        label.setStyle("color", "red");

                    if (makeBold)
                        label.setStyle("fontWeight", "bold");                
                    else
                        label.setStyle("fontWeight", "normal");
                }
            }
        }

        function comboEvaluate(event:ListEvent):void {
            if (bLoadingItems)
                return;
			var obj:ComboBox = ComboBox(event.target);
            m_engine.EvaluateForAttribute(obj.id, obj.selectedItem.toString());
            UpdateControls();
        }

        var txtValue = "";
        function txtTextChanged(event:Event):void {
            if (bLoadingItems)
                return;
			var obj:TextInput = TextInput(event.currentTarget);
            if (txtValue != obj.text) {
                m_engine.EvaluateForAttribute(obj.id, obj.text);
                UpdateControls();
            }
        }

        function txtBeginEdit(event:Event):void {
			if (bLoadingItems)
                return;
			var obj:TextInput = TextInput(event.currentTarget);
            txtValue = obj.text;
        }
        
        function SaveConfig():void {
            txtXML.text = "";
            txtXML.text = m_rootNode.SaveXML(true);
        }
        
        function LoadConfig():void {
            if (m_rootNode.LoadXML(txtXML.text))
            {
                if (m_engine != null)
                {
                    m_engine = null;
                }
                m_engine = new LinearEngine(m_rootNode, "HydraulicCylinderDictionary");
                m_engine.EvaluateAll();
                
                UpdateControls();        
            }               
        }
		
		function EnableDebug(event:Event):void {
			m_engine.SetDebugging(chkDebug.selected);			
		}
		]]>
	</fx:Script>

</s:Application>